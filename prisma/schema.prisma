// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "typedSql"]
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Organization {
  id String @id @default(uuid())
  as String @unique
  name String

  events Event[]
}

model Event {
  id String @id @default(uuid())
  shop String

  // Event metadata
  shopifyId String @unique
  name String
  type String
  timestamp DateTime
  clientId String

  // Event context
  documentUrl String // Event context
  userLanguage String // Event context
  userAgent String // Event context

  // Organization
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Products
  products EventProduct[]
}

model EventProduct {
  id String @id @default(uuid())
  productVariantId String

  // Event
  eventId String
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, productVariantId])
}

// model EventCheckout {
//   orderId String // only available for checkout completed
//   // Address information
//   email String
//   phone String
//   address1 String
//   address2 String
// }

// model EventCollection {
//   collectionId String
// }
